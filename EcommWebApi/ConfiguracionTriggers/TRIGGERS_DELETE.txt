--TRIGGER (DELETE)--

_________________________________________Tabla Categorias______________________________________

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER TRIGGER_DELETE_CATEGORIA
ON Categorias
AFTER DELETE
AS 
BEGIN
    DECLARE @categoria VARCHAR(100)
    DECLARE @producto VARCHAR(100) = 'No se afectó ningún producto'
    DECLARE @Empleado VARCHAR(100) = HOST_NAME()


    -- Obtener el nombre de la categoria
	SELECT @categoria = NombreCategoria FROM deleted

    -- Intentar obtener el nombre del producto afectado a partir de la tabla "Productos" y "Categorias"
    SELECT @producto = P.NombreProducto
    FROM Productos P
    INNER JOIN deleted D ON P.CategoriaId = D.IdCategoria

    UPDATE Productos SET CategoriaId = NULL WHERE CategoriaId = (SELECT IdCategoria FROM deleted)

    -- Insertar registro en la tabla "Historial" con los datos obtenidos
     INSERT INTO HistorialCategorias (FechaRealizado, NombreAccion, NombreCategoriaAntigua, NombreCategoriaNueva, NombreEmpleado, ProductoAfectado)
	 VALUES (GETDATE(), 'Eliminación de categoria', @categoria, '', @Empleado, @producto)
END

______________________________________Tabla Producto___________________________________________

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER TRIGGER_ELIMINAR_PRODUCTO
   ON Productos
   AFTER DELETE
AS 
BEGIN
    DECLARE @categoria VARCHAR(100)
	DECLARE @marca VARCHAR(100)
    DECLARE @producto VARCHAR(100)
    DECLARE @subproducto VARCHAR(100) = 'Ningún subproducto afectado'
    DECLARE @Empleado VARCHAR(100) = HOST_NAME()

    -- Obtener el nombre del producto
	SELECT @producto = NombreProducto FROM deleted

	-- Obtener el nombre de la categoria 
	SELECT @categoria = NombreCategoria FROM deleted D INNER JOIN Categorias ca ON D.CategoriaId = ca.IdCategoria

	-- Obtener el nombre de la marca
	SELECT @marca = NombreMarca FROM deleted D INNER JOIN Marcas ma ON D.MarcaId = ma.IdMarca

    -- Intentar obtener el nombre del producto afectado a partir de la tabla "Productos" y "Subprodcuto"
    SELECT @subproducto = S.CodigoBarras
    FROM Subproductos S
    INNER JOIN deleted D ON S.ProductoId = D.IdProducto

	-- Actualización del subproducto
    UPDATE Subproductos SET ProductoId = NULL WHERE ProductoId = (SELECT IdProducto FROM deleted)

    -- Insertar registro en la tabla "Historial" con los datos obtenidos
     INSERT INTO HistorialProductos 
	 (FechaRealizado, 
	 NombreAccion, 
	 NombreEmpleado,
	 NombreCategoriaAntigua,
	 NombreCategoriaNueva,
	 NombreMarcaAntigua,
	 NombreMarcaNueva,
	 NombreProductoAntiguo, 
	 NombreProductoNuevo, 
	 SubproductoAfectado)VALUES 
	 (GETDATE(), 
	 'Eliminación de producto',
	 @Empleado,
	 @categoria,
	 '',
	 @marca,
	 '',
	 @producto,
	 '',
	 @subproducto)

END
GO

_________________________________________Tabla Empleados_______________________________________

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Crear el trigger que se dispare después de insertar un nuevo registro en la tabla 'Empleados'
CREATE TRIGGER TRIGGER_ELIMINAR_EMPLEADO
ON Empleados
AFTER DELETE
AS 
BEGIN
    DECLARE @persona VARCHAR(100) = HOST_NAME()
	DECLARE @apellidoEmpleado VARCHAR(100) = ''
	DECLARE @apellidoEmpleadoAntiguo VARCHAR(100) 
	DECLARE @nombreEmpleado VARCHAR(100) = ''
    DECLARE @nombreEmpleadoAntiguo VARCHAR(100) 
	DECLARE @numEmpleado VARCHAR(100) = ''
    DECLARE @numEmpleadoAntiguo VARCHAR(100) 
	DECLARE @rfc VARCHAR(100) = ''
	DECLARE @rfcAntiguo VARCHAR(100) 
	DECLARE @fechaNac VARCHAR(100) = ''
	DECLARE @fechaNacAntigua VARCHAR(100) 
	DECLARE @telefonoEmpleado VARCHAR(100) = ''
	DECLARE @telefonoEmpleadoAntiguo VARCHAR(100) 
	DECLARE @emailEmpleado VARCHAR(100) = ''
	DECLARE @emailEmpleadoAntiguo VARCHAR(100)
	DECLARE @usuarioEmpleado VARCHAR(100) = ''
	DECLARE @usuarioEmpleadoAntiguo VARCHAR(100) 
	DECLARE @passwordEmpleado VARCHAR(100) = ''
	DECLARE @passwordEmpleadoAntigua VARCHAR(100)
	DECLARE @fechaIngreso VARCHAR(100) = ''
	DECLARE @fechaIngresoAntigua VARCHAR(100) 
	DECLARE @fechaBaja VARCHAR(100) = ''
	DECLARE @fechaBajaAntigua VARCHAR(100) 
    DECLARE @direccionAntigua NVARCHAR(MAX) 
	DECLARE @direccion NVARCHAR(MAX) = ''
    DECLARE @generoAntiguo VARCHAR(100)  
	DECLARE @genero VARCHAR(100) = ''
    DECLARE @estadoEmpleadoAntiguo VARCHAR(100) 
	DECLARE @estadoEmpleado VARCHAR(100) = ''
    DECLARE @rolAntiguo VARCHAR(100)  
	DECLARE @rol VARCHAR(100) = ''
    --Declaraciones que no se usan el historial pero sirven para obtener el dato de dirección antigua y nueva
	DECLARE @direccionIdEliminada INT;

	-- ASIGNACION DE VALORES PARA LA TABLA HISTORIAL EMPLEADOS
	-- ATRIBUTOS DE LA TABLA EMPLEADOS

	--DATO ANTES DE ELIMINAR
	SELECT @apellidoEmpleadoAntiguo = ApellidoEmpleado FROM deleted

	SELECT @nombreEmpleadoAntiguo = NombreEmpleado FROM deleted

	SELECT @numEmpleadoAntiguo = NumEmpleado FROM deleted

	SELECT @rfcAntiguo = RFCE FROM deleted

	SELECT @fechaNacAntigua = FechaNacEmpleado FROM deleted

	SELECT @telefonoEmpleadoAntiguo = TelEmpleado FROM deleted

	SELECT @emailEmpleadoAntiguo = EmailEmpleado FROM deleted

	SELECT @usuarioEmpleadoAntiguo = NickEmpleado FROM deleted

	SELECT @passwordEmpleadoAntigua = PassEmpleado FROM deleted

	SELECT @fechaIngresoAntigua= FechaIngreso FROM deleted

	SELECT @fechaBajaAntigua = FechaBaja FROM deleted

	--Datos foráneos

     SELECT @direccionIdEliminada = DireccionId FROM deleted;

     -- Obtener la dirección eliminada a partir del ID de la dirección antes de eliminar
     SELECT @direccionAntigua = (di.CP + ' ' + di.Calle1 + ' ' + di.Calle2  + ' ' + di.NumExt + ' ' + di.Detalles + ' ' +
                              ci.NombreCiudad + ' ' + es.NombreEstado + ' ' + es.CodigoEstado + ' ' + pa.NombrePais + ' ' + pa.ISO)
     FROM Direcciones di
     INNER JOIN Ciudades ci ON ci.IdCiudad = di.CiudadId
     INNER JOIN Estados es ON es.IdEstado = ci.EstadoId
     INNER JOIN Paises pa ON pa.IdPais = es.PaisId
     WHERE di.IdDireccion = @direccionIdEliminada;


	SELECT @generoAntiguo = NombreGenero FROM deleted D INNER JOIN Generos G ON D.GeneroId = G.IdGenero

	SELECT @estadoEmpleadoAntiguo = NombreEdoEmpleado FROM deleted D INNER JOIN EstadoEmpleados EE ON D.EdoEmpleadoId = EE.IdEdoEmpleado

	SELECT @rolAntiguo = NombreRol FROM deleted D INNER JOIN Roles R ON D.RolId = R.IdRol

	-- INSERCION DE DATOS OBTENIDOS A LA TABLA DE HISTORIAL EMPLEADOS
	INSERT INTO HistorialEmpleados(
	FechaRealizado,
	NombreAccion,
	NombrePersona, 
	ApellidoEmpleadoAntiguo,
    ApellidoEmpleadoNuevo,
    NombreEmpleadoAntiguo,
    NombreEmpleadoNuevo,
	NumeroEmpleadoAntiguo,
    NumeroEmpleadoNuevo,
    RFCAntiguo,
    RFCNuevo,
    FechaNacimientoAntigua,
    FechaNacimientoNueva,
    TelefonoEmpleadoAntiguo,
    TelefonoEmpleadoNuevo,
    EmailEmpleadoAntiguo,
    EmailEmpleadoNuevo,
    NombreUsuarioAntiguo,
    NombreUsuarioNuevo,
    PasswordEmpleadoAntigua,
    PasswordEmpleadoNueva,
    FechaIngresoAntigua,
    FechaIngresoNueva,
    FechaBajaAntigua,
    FechaBajaNueva,
    DireccionEmpleadoAntigua,
    DireccionEmpleadoNueva,
    NombreEdoEmpleadoAntiguo,
    NombreEdoEmpleadoNuevo,
    NombreGeneroAntiguo,
    NombreGeneroNuevo,
    NombreRolAntiguo,
    NombreRolNuevo)
	VALUES (GETDATE(), 'Eliminación de empleado', @persona, 
	@apellidoEmpleadoAntiguo, 
	@apellidoEmpleado,
	@nombreEmpleadoAntiguo, 
	@nombreEmpleado,
	@numEmpleadoAntiguo,
	@numEmpleado,
	@rfcAntiguo,
	@rfc,
	@fechaNacAntigua,
	@fechaNac,
	@telefonoEmpleadoAntiguo,
	@telefonoEmpleado,
	@emailEmpleadoAntiguo,
	@emailEmpleado,
	@usuarioEmpleadoAntiguo,
	@usuarioEmpleado,
	@passwordEmpleadoAntigua,
	@passwordEmpleado,
	@fechaIngresoAntigua,
	@fechaIngreso,
	@fechaBajaAntigua,
	@fechaBaja,
	@direccionAntigua,
	@direccion,
	@estadoEmpleadoAntiguo,
	@estadoEmpleado,
	@generoAntiguo,
	@genero,
	@rolAntiguo,
	@rol)
END

_________________________________________Tabla Subproductos_______________________________________

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE TRIGGER TRIGGER_ELIMINAR_SUBPRODUCTO
   ON  Subproductos
   AFTER DELETE
AS 
BEGIN
    DECLARE @Empleado VARCHAR(100) = HOST_NAME()
	DECLARE @codigo VARCHAR(100)
	DECLARE @imagen NVARCHAR(MAX)
	DECLARE @descripcion NVARCHAR(MAX)
	DECLARE @precio DECIMAL(18,2)
	DECLARE @stock INT
    DECLARE @producto VARCHAR(100)
	DECLARE @sucursal VARCHAR(100)
	DECLARE @carritoProducto VARCHAR(100) = 'Ningún carrito producto afectado'
	DECLARE @subproductoserie VARCHAR(100) = 'Ningún subproducto serie afectado'

	 -- Obtener el codigo de barras del subproducto antes de eliminarlo
	 SELECT @codigo = CodigoBarras FROM deleted

	 -- Obtener la imagen del subproducto antes de eliminarlo
	 SELECT @imagen = ImagenSub FROM deleted

	 -- Obtener la descripción del subproducto antes de eliminarlo
	 SELECT @descripcion = Descripcion FROM deleted

	 -- Obtener el precio del subproducto antes de eliminarlo
	 SELECT @precio = PrecioSub FROM deleted

	 -- Obtener el stock del subproducto antes de eliminarlo
	 SELECT @stock = Stock FROM deleted

	 -- Obtener el nombre del producto antes de eliminarlo 
	SELECT @producto = NombreProducto FROM deleted D INNER JOIN Productos P ON D.ProductoId = P.IdProducto

	-- Obtener el nombre del producto antes de eliminarlo 
	SELECT @sucursal = NombreSucursal FROM deleted D INNER JOIN Sucursales S ON D.SucursalId = S.IdSucursal

	
    -- Intentar obtener el ID del CarritoProductos afectado a partir de la tabla "Subproductos" y "CarritoProductos"
    SELECT @carritoProducto = C.IdCarritoProducto
    FROM CarritoProductos C
    INNER JOIN deleted D ON C.SubproductoId = D.IdSubproducto

	-- Actualización del carritoProductos 
    UPDATE CarritoProductos SET SubproductoId = NULL WHERE SubproductoId = (SELECT IdSubproducto FROM deleted)


	-- Intentar obtener el ID de subproducto serie afectado a partir de la tabla "Subproductos" y "SubproductosSerie"
    SELECT @subproductoserie = SS.IdSerie
    FROM SubproductosSerie SS
    INNER JOIN deleted D ON SS.SubproductoId = D.IdSubproducto

	-- Actualización del SubproductosSerie 
    UPDATE SubproductosSerie SET SubproductoId = NULL WHERE SubproductoId = (SELECT IdSubproducto FROM deleted)


    -- Insertar registro en la tabla "HistorialSuproductos" con los datos obtenidos
    INSERT INTO HistorialSubproductos 
	            (FechaRealizado,   
                 NombreAccion,
                 NombreEmpleado,
                 CodigoBarrasAntigua, 
                 CodigoBarrasNueva,
                 NombreImagenAntigua,
                 NombreImagenNueva,
                 DescripcionAntigua,
                 DescripcionNueva,
                 PrecioSubAntiguo,
                 PrecioSubNuevo,
                 StockAntiguo,
                 StockNuevo,
                 NombreProductoAntiguo,
                 NombreProductoNuevo,
                 NombreSucursalAntigua,
                 NombreSucursalNueva,
                 CarritoProductoAfectado,
                 SubproductoSerieAfectado) VALUES
				(GETDATE(), 
				'Eliminación del subproducto',
				@Empleado,
				@codigo,
				'',
				@imagen,
				'',
				@descripcion,
				'',
				@precio,
				0,
				@stock,
				0,
				@producto,
				'',
				@sucursal,
				'',
				@carritoProducto,
				@subproductoserie)

END